/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package tugaspcdimagecolouring;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Frame;
import java.awt.Image;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.awt.image.BufferedImage;
import java.awt.image.DataBufferByte;
import java.io.File;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.WindowConstants;
import javax.swing.filechooser.FileNameExtensionFilter;
import org.opencv.core.Core;
import org.opencv.core.CvType;
import org.opencv.core.Mat;
import org.opencv.highgui.HighGui;
import org.opencv.imgcodecs.Imgcodecs;
import org.opencv.imgproc.Imgproc;

/**
 *
 * @author pc
 */
public class Main extends javax.swing.JFrame {

    JFileChooser chooser;
    String path = "C:\\Users\\pc\\Pictures";
    // public static final 

    /**
     * Creates new form Main
     */
    public Main() {
        JFrame jframe = new JFrame("TUGAS PCD");
        jframe.setTitle("Tugas PCD Image Enhancement Colouring");
        initComponents();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFileChooser1 = new javax.swing.JFileChooser();
        jPanel2 = new javax.swing.JPanel();
        button_negatifEffect = new javax.swing.JButton();
        button_grayScale = new javax.swing.JButton();
        button_colorSpace = new javax.swing.JButton();
        button_brightness = new javax.swing.JButton();
        button_tresholding = new javax.swing.JButton();
        button_contrast = new javax.swing.JButton();
        button_lowPassFilter = new javax.swing.JButton();
        button_highPassFilter = new javax.swing.JButton();
        button_highBoostFilter = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        button_exit = new javax.swing.JButton();
        button_fileChooser = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        text_filePath = new javax.swing.JTextField();
        label_image = new javax.swing.JLabel();
        button_reset = new javax.swing.JButton();
        button_originalImage = new javax.swing.JButton();
        slider = new javax.swing.JSlider();
        text_getClick = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        button_about = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Image Enhancement Colouring");
        setBackground(new java.awt.Color(0, 0, 0));
        setResizable(false);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel2.setBackground(new java.awt.Color(51, 51, 51));

        button_negatifEffect.setBackground(new java.awt.Color(0, 0, 0));
        button_negatifEffect.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        button_negatifEffect.setForeground(new java.awt.Color(0, 204, 204));
        button_negatifEffect.setText("Negative Effect");
        button_negatifEffect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_negatifEffectActionPerformed(evt);
            }
        });

        button_grayScale.setBackground(new java.awt.Color(0, 0, 0));
        button_grayScale.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        button_grayScale.setForeground(new java.awt.Color(0, 204, 204));
        button_grayScale.setText("Grayscale");
        button_grayScale.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_grayScaleActionPerformed(evt);
            }
        });

        button_colorSpace.setBackground(new java.awt.Color(0, 0, 0));
        button_colorSpace.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        button_colorSpace.setForeground(new java.awt.Color(0, 204, 204));
        button_colorSpace.setText("Color Space");
        button_colorSpace.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_colorSpaceActionPerformed(evt);
            }
        });

        button_brightness.setBackground(new java.awt.Color(0, 0, 0));
        button_brightness.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        button_brightness.setForeground(new java.awt.Color(0, 204, 204));
        button_brightness.setText("Brightness");
        button_brightness.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_brightnessActionPerformed(evt);
            }
        });

        button_tresholding.setBackground(new java.awt.Color(0, 0, 0));
        button_tresholding.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        button_tresholding.setForeground(new java.awt.Color(0, 204, 204));
        button_tresholding.setText("Tresholding");
        button_tresholding.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_tresholdingActionPerformed(evt);
            }
        });

        button_contrast.setBackground(new java.awt.Color(0, 0, 0));
        button_contrast.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        button_contrast.setForeground(new java.awt.Color(0, 204, 204));
        button_contrast.setText("Contrast");
        button_contrast.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_contrastActionPerformed(evt);
            }
        });

        button_lowPassFilter.setBackground(new java.awt.Color(0, 0, 0));
        button_lowPassFilter.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        button_lowPassFilter.setForeground(new java.awt.Color(0, 204, 204));
        button_lowPassFilter.setText("Low Pass Filter");

        button_highPassFilter.setBackground(new java.awt.Color(0, 0, 0));
        button_highPassFilter.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        button_highPassFilter.setForeground(new java.awt.Color(0, 204, 204));
        button_highPassFilter.setText("High Pass Filter");

        button_highBoostFilter.setBackground(new java.awt.Color(0, 0, 0));
        button_highBoostFilter.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        button_highBoostFilter.setForeground(new java.awt.Color(0, 204, 204));
        button_highBoostFilter.setText("High Boost Filter");

        jLabel1.setFont(new java.awt.Font("Trebuchet MS", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 204, 204));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("TUGAS PCD IMAGE ENHANCEMENT COLOURING");

        button_exit.setBackground(new java.awt.Color(0, 0, 0));
        button_exit.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        button_exit.setForeground(new java.awt.Color(0, 204, 204));
        button_exit.setText("Exit");
        button_exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_exitActionPerformed(evt);
            }
        });

        button_fileChooser.setBackground(new java.awt.Color(0, 0, 0));
        button_fileChooser.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        button_fileChooser.setForeground(new java.awt.Color(0, 204, 204));
        button_fileChooser.setText("Choose File");
        button_fileChooser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_fileChooserActionPerformed(evt);
            }
        });

        jLabel2.setBackground(new java.awt.Color(255, 255, 255));
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setToolTipText("File.jpeg");

        text_filePath.setEditable(false);
        text_filePath.setBackground(new java.awt.Color(0, 0, 0));
        text_filePath.setForeground(new java.awt.Color(0, 204, 204));
        text_filePath.setToolTipText("File Path");
        text_filePath.setFocusable(false);
        text_filePath.setMargin(new java.awt.Insets(2, 10, 2, 2));
        text_filePath.setRequestFocusEnabled(false);

        label_image.setBackground(new java.awt.Color(255, 255, 255));
        label_image.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        label_image.setForeground(new java.awt.Color(0, 204, 204));
        label_image.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        label_image.setText("Show Image");
        label_image.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 204, 204), 1, true));
        label_image.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        button_reset.setBackground(new java.awt.Color(0, 0, 0));
        button_reset.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        button_reset.setForeground(new java.awt.Color(0, 204, 204));
        button_reset.setText("Reset");
        button_reset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_resetActionPerformed(evt);
            }
        });

        button_originalImage.setBackground(new java.awt.Color(0, 0, 0));
        button_originalImage.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        button_originalImage.setForeground(new java.awt.Color(0, 204, 204));
        button_originalImage.setText("Original Image");
        button_originalImage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_originalImageActionPerformed(evt);
            }
        });

        slider.setBackground(new java.awt.Color(51, 51, 51));
        slider.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        slider.setForeground(new java.awt.Color(0, 204, 204));
        slider.setMajorTickSpacing(50);
        slider.setMaximum(200);
        slider.setMinorTickSpacing(5);
        slider.setPaintLabels(true);
        slider.setPaintTicks(true);
        slider.setToolTipText("");
        slider.setValue(100);
        slider.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        slider.setEnabled(false);
        slider.setName(""); // NOI18N
        slider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderStateChanged(evt);
            }
        });
        slider.addMouseWheelListener(new java.awt.event.MouseWheelListener() {
            public void mouseWheelMoved(java.awt.event.MouseWheelEvent evt) {
                sliderMouseWheelMoved(evt);
            }
        });

        text_getClick.setEditable(false);
        text_getClick.setBackground(new java.awt.Color(0, 0, 0));
        text_getClick.setForeground(new java.awt.Color(0, 204, 204));
        text_getClick.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        text_getClick.setToolTipText("Original Image Active");
        text_getClick.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                text_getClickActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(0, 204, 204));
        jLabel3.setText("Button Active");

        button_about.setBackground(new java.awt.Color(0, 0, 0));
        button_about.setForeground(new java.awt.Color(0, 204, 204));
        button_about.setText("About Program");
        button_about.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button_aboutActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(button_negatifEffect, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(button_grayScale, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(button_colorSpace, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(button_brightness, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(button_contrast, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(button_tresholding, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(button_lowPassFilter, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(button_highPassFilter, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(button_highBoostFilter, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(button_originalImage, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(button_about, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(102, 102, 102))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(57, 57, 57)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(button_fileChooser, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(text_filePath, javax.swing.GroupLayout.PREFERRED_SIZE, 401, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(button_exit, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(text_getClick, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(button_reset, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(slider, javax.swing.GroupLayout.PREFERRED_SIZE, 700, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(label_image, javax.swing.GroupLayout.PREFERRED_SIZE, 700, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addGap(43, 43, 43))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 549, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(183, 183, 183))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 20, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(button_reset)
                    .addComponent(text_getClick, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(button_originalImage, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(button_negatifEffect)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(button_grayScale)
                        .addGap(18, 18, 18)
                        .addComponent(button_colorSpace)
                        .addGap(18, 18, 18)
                        .addComponent(button_brightness)
                        .addGap(18, 18, 18)
                        .addComponent(button_contrast)
                        .addGap(18, 18, 18)
                        .addComponent(button_tresholding)
                        .addGap(18, 18, 18)
                        .addComponent(button_lowPassFilter)
                        .addGap(18, 18, 18)
                        .addComponent(button_highPassFilter)
                        .addGap(18, 18, 18)
                        .addComponent(button_highBoostFilter))
                    .addComponent(label_image, javax.swing.GroupLayout.PREFERRED_SIZE, 415, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(slider, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(8, 8, 8)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(button_fileChooser)
                    .addComponent(text_filePath, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(button_exit)
                    .addComponent(button_about))
                .addGap(38, 38, 38))
        );

        getContentPane().add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, 710));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void button_exitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_exitActionPerformed
        int confirmed = JOptionPane.showConfirmDialog(null,
                "Are you sure you want to exit the program?", "Confirmation Dialog",
                JOptionPane.YES_NO_OPTION);

        if (confirmed == JOptionPane.YES_OPTION) {
            System.exit(0);
            dispose();
        } else {

        }
    }//GEN-LAST:event_button_exitActionPerformed

    private void button_fileChooserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_fileChooserActionPerformed
        BufferedImage bi = null;
        try {
            bi = ImageIO.read(file());
            label_image.setText(null);
            label_image.setIcon(ResizeImage(bi));
        } catch (Exception e) {
        }


    }//GEN-LAST:event_button_fileChooserActionPerformed

    private void button_negatifEffectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_negatifEffectActionPerformed

        //read image
        try {
            BufferedImage img = null;
            File f;
            f = new File(text_filePath.getText());
            try {
                img = ImageIO.read(f);
            } catch (Exception e) {
            }
            int width = img.getWidth();
            int height = img.getHeight();
            //convert to negative
            for (int y = 0; y < height; y++) {
                for (int x = 0; x < width; x++) {
                    int p = img.getRGB(x, y);
                    int a = (p >> 24) & 0xff;
                    int r = (p >> 16) & 0xff;
                    int g = (p >> 8) & 0xff;
                    int b = p & 0xff;
                    //subtract RGB from 255
                    r = 255 - r;
                    g = 255 - g;
                    b = 255 - b;
                    //set new RGB value
                    p = (a << 24) | (r << 16) | (g << 8) | b;
                    img.setRGB(x, y, p);
                }
            }

            label_image.setText(null);
            label_image.setIcon(null);
            label_image.setIcon(ResizeImage(img));
            text_getClick.setText("Negative Effect Active");
            slider.setEnabled(false);

        } catch (NullPointerException e) {
            JOptionPane.showMessageDialog(null,
                    "Please choose image first", "Image has not been attached",
                    JOptionPane.OK_OPTION);
        }
        //get image width and height


    }//GEN-LAST:event_button_negatifEffectActionPerformed

    private void button_resetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_resetActionPerformed
        label_image.setIcon(null);
        label_image.setText("Show Image");
        text_filePath.setText(null);
        text_getClick.setText(null);
        slider.setEnabled(false);
        slider.setValue(100);
    }//GEN-LAST:event_button_resetActionPerformed

    private void button_originalImageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_originalImageActionPerformed
        //   File file = null;
        try {
            File file = new File(text_filePath.getText());

            BufferedImage bi = null;
            try {
                bi = ImageIO.read(file);
            } catch (Exception e) {
            }
            label_image.setText(null);
            label_image.setIcon(null);
            label_image.setIcon(ResizeImage(bi));
            text_getClick.setText("Original Image Active");
            slider.setEnabled(false);
        } catch (NullPointerException e) {
            JOptionPane.showMessageDialog(null,
                    "Please choose image first", "Image has not been attached",
                    JOptionPane.OK_OPTION);
//
//        if (confirmed == JOptionPane.YES_OPTION) {
//            dispose();
//        }
        }

    }//GEN-LAST:event_button_originalImageActionPerformed

    private void button_grayScaleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_grayScaleActionPerformed
        //   File file = null;

        try {
            BufferedImage image = null;
            int width;
            int height;
            File input = new File(text_filePath.getText());
            try {
                image = ImageIO.read(input);
            } catch (IOException e) {
            }

            width = image.getWidth();
            height = image.getHeight();
            for (int i = 0; i < height; i++) {
                for (int j = 0; j < width; j++) {
                    Color c = new Color(image.getRGB(j, i));

                    int red = (int) (c.getRed() * 0.299);
                    int green = (int) (c.getGreen() * 0.587);
                    int blue = (int) (c.getBlue() * 0.114);
                    Color newColor = new Color(red + green + blue,
                            red + green + blue, red + green + blue);
                    image.setRGB(j, i, newColor.getRGB());
                }
            }
            label_image.setText(null);
            label_image.setIcon(null);
            label_image.setIcon(ResizeImage(image));
            text_getClick.setText("Gray Scale Active");
            slider.setEnabled(false);

        } catch (NullPointerException e) {
            JOptionPane.showMessageDialog(null,
                    "Please choose image first", "Image has not been attached",
                    JOptionPane.OK_OPTION);
        }
    }//GEN-LAST:event_button_grayScaleActionPerformed

    private void button_colorSpaceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_colorSpaceActionPerformed
        try {
            System.loadLibrary(Core.NATIVE_LIBRARY_NAME);
            File input = new File(text_filePath.getText());
            BufferedImage image = null;
            try {
                image = ImageIO.read(input);
            } catch (Exception e) {
            }

            byte[] data = ((DataBufferByte) image.getRaster().
                    getDataBuffer()).getData();
            Mat mat = new Mat(image.getHeight(), image.getWidth(), CvType.CV_8UC3);
            mat.put(0, 0, data);
            Mat mat1 = new Mat(image.getHeight(), image.getWidth(), CvType.CV_8UC3);
            Imgproc.cvtColor(mat, mat1, Imgproc.COLOR_RGB2HSV);
            byte[] data1 = new byte[mat1.rows() * mat1.cols() * (int) (mat1.elemSize())];
            mat1.get(0, 0, data1);
            BufferedImage image1 = new BufferedImage(mat1.cols(), mat1.rows(), 5);
            image1.getRaster().setDataElements(0, 0, mat1.cols(), mat1.rows(), data1);
            label_image.setText(null);
            label_image.setIcon(null);
            label_image.setIcon(ResizeImage(image1));
            text_getClick.setText("Color Space Active");
            slider.setEnabled(false);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null,
                    "Please choose image first", "Image has not been attached",
                    JOptionPane.OK_OPTION);
        }
    }//GEN-LAST:event_button_colorSpaceActionPerformed

    private void button_contrastActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_contrastActionPerformed
        if (text_filePath.getText().equals("")) {
            JOptionPane.showMessageDialog(null,
                    "Please choose image first", "Image has not been attached",
                    JOptionPane.OK_OPTION);
        } else {
            text_getClick.setText("Contrast Active");
            slider.setEnabled(true);
        }
    }//GEN-LAST:event_button_contrastActionPerformed

    private void button_brightnessActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_brightnessActionPerformed
        if (text_filePath.getText().equals("")) {
            JOptionPane.showMessageDialog(null,
                    "Please choose image first", "Image has not been attached",
                    JOptionPane.OK_OPTION);
        } else {
            text_getClick.setText("Brightness Active");
            slider.setEnabled(true);
        }

    }//GEN-LAST:event_button_brightnessActionPerformed

    private void sliderMouseWheelMoved(java.awt.event.MouseWheelEvent evt) {//GEN-FIRST:event_sliderMouseWheelMoved

    }//GEN-LAST:event_sliderMouseWheelMoved

    private void sliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sliderStateChanged
        try {
            if (text_getClick.getText().equals("Brightness Active")) {
                int width;
                int height;
                double alpha = 1;
                //   System.out.println(alpha);
                double beta = (double) slider.getValue() - 100;
                String alamat = text_filePath.getText();
                try {
                    System.loadLibrary(Core.NATIVE_LIBRARY_NAME);
                    Mat source = Imgcodecs.imread(alamat, Imgcodecs.IMREAD_COLOR);
                    Mat destination = new Mat(source.rows(), source.cols(), source.type());
                    source.convertTo(destination, -1, alpha, beta);

                    Image imagebrightness = Mat2BufferedImage(destination);
//        displayImage(imagegrayshow, "grayscale");
                    imagebrightness = imagebrightness.getScaledInstance(label_image.getWidth(), label_image.getHeight(), Image.SCALE_SMOOTH);
                    ImageIcon i = new ImageIcon(imagebrightness);
                    label_image.setIcon(i);
                    label_image.setText("");

                } catch (Exception e) {
                    System.out.println("error: " + e.getMessage());
                }
            } else if (text_getClick.getText().equals("Contrast Active")) {
                int width;
                int height;
                double alpha = (double) slider.getValue() / 50;
                System.out.println(alpha);
                //   System.out.println(alpha);
                double beta = 0;
                String alamat = text_filePath.getText();
                try {
                    System.loadLibrary(Core.NATIVE_LIBRARY_NAME);
                    Mat source = Imgcodecs.imread(alamat, Imgcodecs.IMREAD_COLOR);
                    Mat destination = new Mat(source.rows(), source.cols(), source.type());
                    source.convertTo(destination, -1, alpha, beta);

                    Image imageConstrast = Mat2BufferedImage(destination);
//        displayImage(imagegrayshow, "grayscale");
                    imageConstrast = imageConstrast.getScaledInstance(label_image.getWidth(), label_image.getHeight(), Image.SCALE_SMOOTH);
                    ImageIcon i = new ImageIcon(imageConstrast);
                    label_image.setIcon(i);
                    label_image.setText("");

                } catch (Exception e) {
                    System.out.println("error: " + e.getMessage());
                }
            } else if (text_getClick.getText().equals("Treshold Active")) {
                int width;
                int height;
                double tresh = (double) slider.getValue();
                // System.out.println(alpha);
                //   System.out.println(alpha);
                // double beta = 0;
                String alamat = text_filePath.getText();
                try {
                    System.loadLibrary(Core.NATIVE_LIBRARY_NAME);
                    Mat source = Imgcodecs.imread(alamat, Imgcodecs.IMREAD_COLOR);
                    Mat destination = new Mat(source.rows(), source.cols(), source.type());

                    Imgproc.threshold(source, destination, tresh, 255, Imgproc.THRESH_BINARY);

                    Image imageTreshold = Mat2BufferedImage(destination);
//        displayImage(imagegrayshow, "grayscale");
                    imageTreshold = imageTreshold.getScaledInstance(label_image.getWidth(), label_image.getHeight(), Image.SCALE_SMOOTH);
                    ImageIcon i = new ImageIcon(imageTreshold);
                    label_image.setIcon(i);
                    label_image.setText("");

                } catch (Exception e) {
                    System.out.println("error: " + e.getMessage());
                }
            }
        } catch (NullPointerException e) {
            JOptionPane.showMessageDialog(null,
                    "Please choose image first", "Image has not been attached",
                    JOptionPane.OK_OPTION);
        }


    }//GEN-LAST:event_sliderStateChanged

    private void text_getClickActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_text_getClickActionPerformed
        if (button_brightness.isRequestFocusEnabled()) {
            text_getClick.setText("Brightness is Active");

        }
    }//GEN-LAST:event_text_getClickActionPerformed

    private void button_aboutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_aboutActionPerformed
        String path = "\n06111640000010 - Yuda Hendriawan Budi H \n\n"
                + "06111640000013 - Shafira Herlinawati \n\n"
                + "06111640000046 - Sandy Editya Prakosa\n\n"
                + "06111640000084 - M Naufal Al Faruq\n\n"
                + "06111640000087 - Ario Fajar Pratama \n\n";
        JOptionPane.showMessageDialog(null, path, "Anggota Kelompok", JOptionPane.CLOSED_OPTION);

    }//GEN-LAST:event_button_aboutActionPerformed

    private void button_tresholdingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button_tresholdingActionPerformed
        if (text_filePath.getText().equals("")) {
            JOptionPane.showMessageDialog(null,
                    "Please choose image first", "Image has not been attached",
                    JOptionPane.OK_OPTION);
        } else {
            text_getClick.setText("Treshold Active");
            slider.setEnabled(true);
        }
    }//GEN-LAST:event_button_tresholdingActionPerformed

    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {

                new Main().setVisible(true);
            }
        });
    }

    public ImageIcon ResizeImage(BufferedImage ImagePath) {
        ImageIcon MyImage = new ImageIcon(ImagePath);
        Image img = MyImage.getImage();
        Image newImg = img.getScaledInstance(label_image.getWidth(), label_image.getHeight(), Image.SCALE_SMOOTH);
        ImageIcon image = new ImageIcon(newImg);
        return image;
    }

    public File file() {
        JFileChooser chooser = new JFileChooser(path);
        chooser.setDialogTitle("Choose Image..");
        FileNameExtensionFilter filter
                = new FileNameExtensionFilter("JPG Images", "jpg", "png");
        chooser.setFileFilter(filter);
        chooser.showOpenDialog(null);
        File file = chooser.getSelectedFile();
        text_filePath.setText(file.toString());
        text_getClick.setText("Original Image Active");
        return file;
    }

    public static BufferedImage Mat2BufferedImage(Mat m) {
        int type = BufferedImage.TYPE_BYTE_GRAY;
        if (m.channels() > 1) {
            type = BufferedImage.TYPE_3BYTE_BGR;
        }
        int bufferSize = m.channels() * m.cols() * m.rows();
        byte[] b = new byte[bufferSize];
        m.get(0, 0, b);
        BufferedImage image = new BufferedImage(m.cols(), m.rows(), type);
        final byte[] targetPixels = ((DataBufferByte) image.getRaster().getDataBuffer()).getData();
        System.arraycopy(b, 0, targetPixels, 0, b.length);
        return image;
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton button_about;
    private javax.swing.JButton button_brightness;
    private javax.swing.JButton button_colorSpace;
    private javax.swing.JButton button_contrast;
    private javax.swing.JButton button_exit;
    private javax.swing.JButton button_fileChooser;
    private javax.swing.JButton button_grayScale;
    private javax.swing.JButton button_highBoostFilter;
    private javax.swing.JButton button_highPassFilter;
    private javax.swing.JButton button_lowPassFilter;
    private javax.swing.JButton button_negatifEffect;
    private javax.swing.JButton button_originalImage;
    private javax.swing.JButton button_reset;
    private javax.swing.JButton button_tresholding;
    private javax.swing.JFileChooser jFileChooser1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JLabel label_image;
    private javax.swing.JSlider slider;
    private javax.swing.JTextField text_filePath;
    private javax.swing.JTextField text_getClick;
    // End of variables declaration//GEN-END:variables
}
